/*
Test generated by RoostGPT for test MiniProjects using AI Type Azure Open AI and AI Model roost-gpt4-32k

{
  background: null,
  rule: null,
  scenario: 'Find pet by status","    Given the API running at http://petstore.swagger.io/v2","    And an endpoint of http://petstore.swagger.io/v2/pet/findByStatus","    When a GET request is made","    And the status parameter is test","    And the Accepts header is application/json","    Then a 200 response is returned within 50ms","","',
  title: 'Find pet by status","    Given the API running at http://petstore.swagger.io/v2","    And an endpoint of http://petstore.swagger.io/v2/pet/findByStatus","    When a GET request is made","    And the status parameter is test","    And the Accepts header is application/json","    Then a 200 response is returned within 50ms","","'
}

*/
package com.smartbear.readyapi.testserver.cucumber.RoostTest;

import io.restassured.http.Method;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Assertions;
import io.restassured.http.ContentType;
import org.junit.jupiter.api.TestInstance;
import static io.restassured.RestAssured.*;
import static org.hamcrest.Matchers.*;

@TestInstance(TestInstance.Lifecycle.PER_CLASS)
public class scenario0Test {
    private String baseURL;

    @BeforeAll
    public void setup() {
        baseURL = System.getenv().get("API_HOST");
    }

    @Test
    public void findPetByStatus() {
        // Read CSV file and split each line by '^|^' delimiter
        List<String[]> payloads = Files.lines(Paths.get("scenario0Test.csv"))
            .skip(1) // Skip header row
            .map(line -> line.split("\\^|\\^")) // split by delimiter
            .collect(Collectors.toList());

       // Loop through the payloads for different scenarios
        for(String[] payloadDetails : payloads) {
            String methodType = payloadDetails[0];
            String url = payloadDetails[1];
            String rawReqHeaders = payloadDetails[2];
            String rawReqBody = payloadDetails[3];
            int expectedRespCode = Integer.parseInt(payloadDetails[4]);
            String rawExpectedRespBody = payloadDetails[5];
            
            // Convert request headers to HashMap
            HashMap<String, String> reqHeaders = new HashMap<>();
            for (String s : rawReqHeaders.split("\\n")) {
                String[] keyValue = s.split(":");
                reqHeaders.put(keyValue[0].trim(), keyValue[1].trim());
            }

            // Prepare request
            RequestSpecification request = RestAssured.given();
            request.baseUri(baseURL);
            for (Map.Entry<String, String> entry : reqHeaders.entrySet()) {
               request.header(entry.getKey(), entry.getValue());
            }

            // Send a GET request and verify the body response along with header
            assertThat().response()
              .contentType(ContentType.JSON)
              .given().spec(request)
              .when().request(methodType, url)
              .then().assertThat().statusCode(expectedRespCode).log().ifStatusCodeMatches(not(expectedRespCode));
                  
            // Parse response body and assert with expected response
            JSONObject expectedRespBody = new JSONObject(rawExpectedRespBody);
            JSONObject actualRespBody = new JSONObject(RestAssured.get(baseURL + url).asString());
            Assertions.assertEquals(expectedRespBody, actualRespBody);
        }
    }
}
