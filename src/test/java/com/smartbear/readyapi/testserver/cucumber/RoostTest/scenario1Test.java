/*
Test generated by RoostGPT for test MiniProjects using AI Type Azure Open AI and AI Model roost-gpt4-32k

{
  background: null,
  rule: null,
  scenario: 'Find pet by tags","    Given the API running at http://petstore.swagger.io/v2","    When a GET request to /pet/findByTags is made","    And the tags parameter is test","    And the request expects json","    Then a 200 response is returned within 50ms","","',
  title: 'Find pet by tags","    Given the API running at http://petstore.swagger.io/v2","    When a GET request to /pet/findByTags is made","    And the tags parameter is test","    And the request expects json","    Then a 200 response is returned within 50ms","","'
}

*/
package com.smartbear.readyapi.testserver.cucumber.RoostTest;

import com.jayway.restassured.RestAssured;
import com.jayway.restassured.response.Response;
import org.junit.Test;
import org.apache.commons.io.FileUtils;
import org.json.JSONObject;
import java.io.File;
import java.io.IOException;
import java.util.List;
import static org.junit.Assert.assertEquals;

public class scenario1Test {

    @Test
    public void findPetByTagsTest() {
        String base_url = System.getenv("API_HOST");
        List<String> payloads = null;
        try {
            // Fetch all payloads for the APIs from "scenario1Test.csv"
            payloads = FileUtils.readLines(new File("scenario1Test.csv"), "UTF-8");
        } catch (IOException e) {
            e.printStackTrace();
        }

        // Iterate over payloads and execute each one
        for (int i = 1; i < payloads.size(); i++) {
            String[] payloadDetails = payloads.get(i).split("^|^");

            String httpMethod = payloadDetails[0];
            String url = base_url + payloadDetails[1];
            JSONObject req_headers = new JSONObject(payloadDetails[2]);
            JSONObject req_body = new JSONObject(payloadDetails[3]);
            int expected_response_code = Integer.parseInt(payloadDetails[4]);
            JSONObject expected_response_body = new JSONObject(payloadDetails[5]);

            // Send request and fetch the response
            Response response = RestAssured.given()
                    .headers(req_headers.toMap())
                    .body(req_body.toString())
                    .when()
                    .request(httpMethod, url);

            // Validate response code and body
            assertEquals(expected_response_code, response.getStatusCode());
            assertEquals(expected_response_body.toMap(), response.getBody().jsonPath().get());
        }
    }
}
