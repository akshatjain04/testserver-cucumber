/*
Test generated by RoostGPT for test MiniProjects using AI Type Azure Open AI and AI Model roost-gpt4-32k

{
  background: null,
  rule: null,
  scenario: 'Find pet by tags","    Given the API running at http://petstore.swagger.io/v2","    When a GET request to /pet/findByTags is made","    And the tags parameter is test","    And the request expects json","    Then a 200 response is returned within 50ms","","',
  title: 'Find pet by tags","    Given the API running at http://petstore.swagger.io/v2","    When a GET request to /pet/findByTags is made","    And the tags parameter is test","    And the request expects json","    Then a 200 response is returned within 50ms","","'
}

*/
package com.smartbear.readyapi.testserver.cucumber.RoostTest;

import io.restassured.RestAssured;
import io.restassured.http.Headers;
import io.restassured.response.Response;
import org.junit.jupiter.api.Test;
import static io.restassured.RestAssured.given;
import static org.junit.Assert.assertEquals;
import java.io.BufferedReader;
import java.io.FileReader;
import org.json.JSONObject;


public class scenario1Test {

    @Test
    void findPetByTagsTest() throws Exception{

        // read scenario1Test.csv
        BufferedReader br = new BufferedReader(new FileReader("scenario1Test.csv"));
        String line;
        int i = 0;
        while ((line = br.readLine()) != null) {
            i++;
            if(i==1) { //skip first row with headers
                continue;
            }
            String[] values = line.split("\\^|\\^"); //payload objects

            // parse objects
            String methodType = values[0];
            String url = values[1];
            Headers headers = new Headers(new JSONObject(values[2]).toMap());
            JSONObject reqBody = new JSONObject(values[3]);
            int expectedRespCode = Integer.parseInt(values[4]);
            JSONObject expectedRespBody = new JSONObject(values[5]);

            // call API based on method type

            Response response;
            if("get".equalsIgnoreCase(methodType)) {
                response = RestAssured
                        .given()
                        .headers(headers)
                        .get(url);

            // check response
            assertEquals(expectedRespCode, response.getStatusCode());
            JSONObject actualRespBody = new JSONObject(response.getBody().asString());
            assertEquals(expectedRespBody.toString(), actualRespBody.toString());
            }
        }
    }
}
