/*
Test generated by RoostGPT for test MiniProjects using AI Type Azure Open AI and AI Model roost-gpt4-32k

{
  background: null,
  rule: null,
  scenario: 'Find pet by tags","    Given the API running at http://petstore.swagger.io/v2","    When a GET request to /pet/findByTags is made","    And the tags parameter is test","    And the request expects json","    Then a 200 response is returned within 50ms","","',
  title: 'Find pet by tags","    Given the API running at http://petstore.swagger.io/v2","    When a GET request to /pet/findByTags is made","    And the tags parameter is test","    And the request expects json","    Then a 200 response is returned within 50ms","","'
}

*/
package com.smartbear.readyapi.testserver.cucumber.RoostTest;

import static io.restassured.RestAssured.*;
import static org.hamcrest.Matchers.*;

import io.restassured.http.ContentType;
import org.junit.Test;

import java.nio.file.Files;
import java.nio.file.Paths;

import org.json.JSONObject;

public class scenario1Test {

    @Test
    public void FindPetByTags() throws Exception {

        // Reading payload data from CSV File
        String content = new String(Files.readAllBytes(Paths.get("scenario1Test.csv")));
        String[] lines = content.split("\n");
        for (int i = 1; i < lines.length; i++) {
            String[] payloads = lines[i].split("\\^\\|\\^");

            String METHOD = payloads[0];
            String URL = payloads[1];
            String REQ_HEADERS = payloads[2];
            String REQ_BODY = payloads[3];
            int RESPONSE_CODE = Integer.parseInt(payloads[4]);
            JSONObject RESPONSE_BODY = new JSONObject(payloads[5]);

            if (!REQ_BODY.equals("")) {
                REQ_BODY = REQ_BODY.replace("^|^^|$", "");
            }

            // Scenario : Find Pet by Tags
            // Make the API call and validate the response
            given().log().all()
                .baseUri(URL)
                .queryParam("tags", REQ_HEADERS)
                .header("Content-Type", ContentType.JSON)
                .when().request(METHOD)
                .then().log().all()
                .assertThat()
                .statusCode(RESPONSE_CODE)
                .contentType(ContentType.JSON)
                .body("id", equalTo((Integer) RESPONSE_BODY.get("id")))
                .body("category", equalTo((String) RESPONSE_BODY.get("category")))
                .body("name", equalTo((String) RESPONSE_BODY.get("name")))
                .body("photoUrls", equalTo((String) RESPONSE_BODY.getJSONArray("photoUrls").getString(0)))
                .body("tags", equalTo((String) RESPONSE_BODY.getJSONArray("tags").getString(0)))
                .body("status", equalTo((String) RESPONSE_BODY.get("status")));
        }
    }
}
