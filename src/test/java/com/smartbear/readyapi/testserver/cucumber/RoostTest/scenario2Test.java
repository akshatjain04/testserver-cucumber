/*
Test generated by RoostGPT for test MiniProjects using AI Type Azure Open AI and AI Model roost-gpt4-32k

{
  background: null,
  rule: null,
  scenario: 'Create pet with parameters","    Given the API running at http://petstore.swagger.io/v2","    When a POST request to /pet is made","    And name is doggies","    And status is available","    Then a 200 response is returned within 50ms","","',
  title: 'Create pet with parameters","    Given the API running at http://petstore.swagger.io/v2","    When a POST request to /pet is made","    And name is doggies","    And status is available","    Then a 200 response is returned within 50ms","","'
}

*/
package com.smartbear.readyapi.testserver.cucumber.RoostTest;

import io.restassured.builder.RequestSpecBuilder;
import io.restassured.specification.RequestSpecification;

import org.apache.commons.io.FileUtils;
import org.junit.BeforeClass;
import org.junit.Test;

import java.io.File;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.util.Arrays;

import static io.restassured.RestAssured.given;

public class scenario2Test {
    private static RequestSpecification spec;

    @BeforeClass
    public static void initSpec() {
        spec = new RequestSpecBuilder()
                .setBaseUri(System.getenv("API_HOST"))
                .build();
    }

    @Test
    public void createPetWithParameters() throws IOException {
        String payload = FileUtils.readFileToString(new File("scenario2Test.csv"), StandardCharsets.UTF_8);
        Arrays.stream(payload.split("\n"))
                .skip(1)
                .map(row -> row.split("\\^\\|\\^"))
                .forEach(data -> {
                    String method = data[0];
                    String url = data[1];
                    String headers = data[2];
                    String body = data[3];
                    int responseCode = Integer.parseInt(data[4]);
                    String responseBody = data[5];

                    if ("POST".equalsIgnoreCase(method)) {
                        given().spec(spec)
                                .headers("Authorization", headers)
                                .body(body)
                                .when()
                                .post(url)
                                .then()
                                .statusCode(responseCode)
                                .body("message", responseBody);
                    }
                });
    }
}
