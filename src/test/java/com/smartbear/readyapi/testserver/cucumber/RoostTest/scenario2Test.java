/*
Test generated by RoostGPT for test MiniProjects using AI Type Azure Open AI and AI Model roost-gpt4-32k

{
  background: null,
  rule: null,
  scenario: 'Create pet with parameters","    Given the API running at http://petstore.swagger.io/v2","    When a POST request to /pet is made","    And name is doggies","    And status is available","    Then a 200 response is returned within 50ms","","',
  title: 'Create pet with parameters","    Given the API running at http://petstore.swagger.io/v2","    When a POST request to /pet is made","    And name is doggies","    And status is available","    Then a 200 response is returned within 50ms","","'
}

*/
package com.smartbear.readyapi.testserver.cucumber.RoostTest;

import org.testng.annotations.Test;
import io.restassured.RestAssured;
import io.restassured.http.ContentType;
import io.restassured.response.Response;
import java.io.*;
import java.util.*;
import static org.hamcrest.Matchers.*;

public class scenario2Test {

  private final String CREATE_PET;
  private final String HOST;

  public scenario2Test() {
      this.CREATE_PET = "/pet";
      this.HOST = System.getenv("API_HOST");
  }

  @Test 
  public void create_pet_with_parameters() throws IOException {

      // Read the payload file
      File file = new File("scenario2Test.csv");
      BufferedReader br = new BufferedReader(new FileReader(file));

      // Skip first line
      br.readLine();

      // Read lines from the second
      String line;
      while ((line = br.readLine()) != null) {

          // Get properties from each line
          String[] props = line.split("\\^\\|\\^");
          String method = props[0];
          String url = props[1];
          String headers = props[2].equals("null") ? null : props[2];
          String reqBody = props[3].equals("null") ? null : props[3];
          int resCode = Integer.parseInt(props[4]);
          String resBody = props[5].equals("null") ? null : props[5];

          // Skipping rows that are not related to this test case
          if (!url.contains(CREATE_PET)) {
              continue;
          }

          // Rest Assured Test Case
          RestAssured
              .given()
                  .contentType(ContentType.JSON)
                  .header("Authorization","Bearer " + headers)
                  .body(reqBody)
                  .when()
                  .request(method, HOST + url)
                  .then()
                  .statusCode(is(resCode))
                  .body("name", equalTo("doggies"))
                  .body("status", equalTo("available"))
                  .log().all();
      }
      br.close();
  }
 }
