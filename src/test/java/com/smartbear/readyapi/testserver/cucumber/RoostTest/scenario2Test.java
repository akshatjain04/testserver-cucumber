/*
Test generated by RoostGPT for test MiniProjects using AI Type Azure Open AI and AI Model roost-gpt4-32k

{
  background: null,
  rule: null,
  scenario: 'Create pet with parameters","    Given the API running at http://petstore.swagger.io/v2","    When a POST request to /pet is made","    And name is doggies","    And status is available","    Then a 200 response is returned within 50ms","","',
  title: 'Create pet with parameters","    Given the API running at http://petstore.swagger.io/v2","    When a POST request to /pet is made","    And name is doggies","    And status is available","    Then a 200 response is returned within 50ms","","'
}

*/
package com.smartbear.readyapi.testserver.cucumber.RoostTest;

import io.restassured.response.Response;
import org.junit.jupiter.api.Test;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.Arrays;

import static io.restassured.RestAssured.given;
import static org.junit.jupiter.api.Assertions.assertEquals;

public class scenario2Test {
    String API_HOST = System.getenv("API_HOST");
    String API_SPEC = "/v2/pet";

    @Test
    public void createPetWithParameters() throws IOException {
        String payloadFile = "scenario2Test.csv";
        Files.lines(Paths.get(payloadFile)).skip(1).forEach((String line) -> {
            String[] payloadDetails = line.split("\\^|\\^");
            String method = payloadDetails[0];
            String url = payloadDetails[1];
            String headersInput = payloadDetails[2].replaceFirst("\\{ ", "").replace(" \\}", "");
            String[] headersArray = headersInput.split(", ");
            String body = payloadDetails[3];

            // construct headers from payload
            String headers = Arrays.stream(headersArray)
                .map(header -> header.split(": "))
                .collect(Collectors.toMap(header -> header[0], header -> header[1]));
            
            switch(method) {
                case "POST":
                    Response response = given().baseUri(API_HOST + API_SPEC)
                        .headers(headers)
                        .body(body)
                            .when().post();

                    assertEquals(200, response.getStatusCode());
                    assertEquals("Success", response.jsonPath().getString("message"));
                    break;
            }
        });
    }
}
